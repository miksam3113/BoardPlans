onDragEnd = (result: DropResult) => {
		const { source, destination, draggableId } = result;
		// eslint-disable-next-line @typescript-eslint/naming-convention
		const board_id = localStorage.getItem('board_id');

		if (!destination) return;

		if (destination.droppableId === source.droppableId && destination.index === source.index) return;
		console.log(source);
		console.log(destination);
		console.log(draggableId);
		dispatch(sort(source.droppableId, destination.droppableId, source.index, destination.index, draggableId));
		if (source.droppableId === destination.droppableId) {
			dispatch(
				MoveCard(
					Number(source.droppableId),
					String(board_id),
					Number(draggableId),
					source.index,
					destination.index,
					Number(destination.droppableId)
				)
			);
		} else if (source.droppableId !== destination.droppableId) {
			dispatch(
				MoveCard(
					Number(source.droppableId),
					String(board_id),
					Number(draggableId),
					source.index,
					destination.index,
					Number(destination.droppableId)
				)
			);
		}
	};




	const [lists, setLists] = useState(props.lists);
	const [currentList, setCurrentList] = useState();
	const [currentCard, setCurrentCard] = useState();

	function dragOverHandler(e: React.DragEvent<HTMLDivElement>) {
		e.preventDefault();
		if (e.target.className === 'card') {
			e.target.style.boxShadow = '0 4px 3px white';
		}
	}

	function dragLeaveHandler(e: React.DragEvent<HTMLDivElement>) {
		e.target.style.boxShadow = 'none';
	}

	function dragStartHandler(e: React.DragEvent<HTMLDivElement>, list: IListItem, card: ICardItem) {
		setCurrentList(list);
		setCurrentCard(card);
	}

	function dragEndHandler(e: React.DragEvent<HTMLDivElement>) {
		e.target.style.boxShadow = 'none';
	}

	function dropHandler(e: React.DragEvent<HTMLDivElement>, list: IListItem, card: ICardItem) {
		e.preventDefault();
		currentList.cards.splice(currentList.cards.indexOf(currentCard), 1);
		const dropIndex = list.cards.indexOf(card);
		list.cards.splice(dropIndex + 1, 0, currentCard);
		setLists(
			lists.map((l) => {
				if (l.id === list.id) {
					return list;
				}
				if (l.id === currentList.id) {
					return currentList;
				}
				return l;
			})
		);
		e.target.style.boxShadow = 'none';
	}



	function funPress(event: { keyCode: number }) {
		if (event.keyCode === 13 && title.title) {
			dispatch(EditList(props.id, props.list.id, title.title.trim(), props.list.position));
		}
	}


											onDragOver={(e) => dragOverHandler(e)}
    										onDragLeave={(e) => dragLeaveHandler(e)}
    										onDragStart={(e) => dragStartHandler(e, list, card)}
    										onDragEnd={(e) => dragEndHandler(e)}
    										onDrop={(e) => dropHandler(e, list, card)}


    												sort(source.droppableId, destination.droppableId, source.index, destination.index, draggableId, this.id);


const onDragEnd = (result: DropResult, columns, setColumns) => {
	if (!result.destination) return;
	const { source, destination } = result;

	if (source.droppableId !== destination.droppableId) {
		console.log(columns);
		const sourceColumn = columns[source.index];
		const destColumn = columns[destination.index];
		const sourceItems = [...sourceColumn.items];
		const destItems = [...destColumn.items];
		const [removed] = sourceItems.splice(source.index, 1);
		destItems.splice(destination.index, 0, removed);
		setColumns({
			...columns,
			[source.index]: {
				...sourceColumn,
				items: sourceItems,
			},
			[destination.index]: {
				...destColumn,
				items: destItems,
			},
		});
	} else {
		const column = columns[source.index];
		const copiedItems = [...column.items];
		const [removed] = copiedItems.splice(source.index, 1);
		copiedItems.splice(destination.index, 0, removed);
		setColumns({
			...columns,
			[source.index]: {
				...column,
				items: copiedItems,
			},
		});
	}
};

/*const onDragEnd = (result: DropResult) => {
		const { destination, source, draggableId } = result;
		const board_id = props.board_id;
		console.log(state);

		if (!destination) {
			return;
		}

		if (source.droppableId === destination.droppableId) {
			const list = state[source.index];
			console.log(list);
			const card = list.cards.splice(source.index, 1);
			list.cards.splice(destination.index, 0, ...card);
			useDispatch(
				MoveCard(
					Number(source.droppableId),
					board_id,
					Number(draggableId),
					source.index,
					destination.index,
					Number(destination.droppableId)
				)
			);
			// eslint-disable-next-line consistent-return
			return { ...state, [source.index]: list };
		}

		// other list
		if (source.droppableId !== destination.droppableId) {
			// find the list where the drag happened
			const listStart = state[source.index];
			// pull out the card from this list
			const card = listStart.cards.splice(source.index, 1);
			// find the list where the drag ended
			const listEnd = state[destination.index];
			console.log(state[destination.index]);
			// put the card in the new list
			listEnd.cards.splice(destination.index, 0, ...card);
			useDispatch(
				MoveCard(
					Number(source.droppableId),
					board_id,
					Number(draggableId),
					source.index,
					destination.index,
					Number(destination.droppableId)
				)
			);
			// eslint-disable-next-line consistent-return
			return {
				...state,
				[source.index]: listStart,
				[destination.index]: listEnd,
			};
		}
	};*/
